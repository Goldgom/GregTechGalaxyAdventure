import {TagEventProbe, TagEventProbe$Type} from "packages/moe/wolfgirl/probejs/generated/TagEventProbe"

declare global {
export namespace ServerEvents {
function tags(extra: "sound_event", handler: (event: TagEventProbe<(Special.SoundEventTag), (Special.SoundEvent)>) => void): void
function tags(extra: "fluid", handler: (event: TagEventProbe<(Special.FluidTag), (Special.Fluid)>) => void): void
function tags(extra: "mob_effect", handler: (event: TagEventProbe<(Special.MobEffectTag), (Special.MobEffect)>) => void): void
function tags(extra: "block", handler: (event: TagEventProbe<(Special.BlockTag), (Special.Block)>) => void): void
function tags(extra: "enchantment", handler: (event: TagEventProbe<(Special.EnchantmentTag), (Special.Enchantment)>) => void): void
function tags(extra: "entity_type", handler: (event: TagEventProbe<(Special.EntityTypeTag), (Special.EntityType)>) => void): void
function tags(extra: "item", handler: (event: TagEventProbe<(Special.ItemTag), (Special.Item)>) => void): void
function tags(extra: "potion", handler: (event: TagEventProbe<(Special.PotionTag), (Special.Potion)>) => void): void
function tags(extra: "particle_type", handler: (event: TagEventProbe<(Special.ParticleTypeTag), (Special.ParticleType)>) => void): void
function tags(extra: "block_entity_type", handler: (event: TagEventProbe<(Special.BlockEntityTypeTag), (Special.BlockEntityType)>) => void): void
function tags(extra: "painting_variant", handler: (event: TagEventProbe<(Special.PaintingVariantTag), (Special.PaintingVariant)>) => void): void
function tags(extra: "custom_stat", handler: (event: TagEventProbe<(Special.CustomStatTag), (Special.CustomStat)>) => void): void
function tags(extra: "chunk_status", handler: (event: TagEventProbe<(Special.ChunkStatusTag), (Special.ChunkStatus)>) => void): void
function tags(extra: "rule_test", handler: (event: TagEventProbe<(Special.RuleTestTag), (Special.RuleTest)>) => void): void
function tags(extra: "pos_rule_test", handler: (event: TagEventProbe<(Special.PosRuleTestTag), (Special.PosRuleTest)>) => void): void
function tags(extra: "menu", handler: (event: TagEventProbe<(Special.MenuTag), (Special.Menu)>) => void): void
function tags(extra: "recipe_type", handler: (event: TagEventProbe<(Special.RecipeTypeTag), (Special.RecipeType)>) => void): void
function tags(extra: "recipe_serializer", handler: (event: TagEventProbe<(Special.RecipeSerializerTag), (Special.RecipeSerializer)>) => void): void
function tags(extra: "attribute", handler: (event: TagEventProbe<(Special.AttributeTag), (Special.Attribute)>) => void): void
function tags(extra: "game_event", handler: (event: TagEventProbe<(Special.GameEventTag), (Special.GameEvent)>) => void): void
function tags(extra: "position_source_type", handler: (event: TagEventProbe<(Special.PositionSourceTypeTag), (Special.PositionSourceType)>) => void): void
function tags(extra: "stat_type", handler: (event: TagEventProbe<(Special.StatTypeTag), (Special.StatType)>) => void): void
function tags(extra: "villager_type", handler: (event: TagEventProbe<(Special.VillagerTypeTag), (Special.VillagerType)>) => void): void
function tags(extra: "villager_profession", handler: (event: TagEventProbe<(Special.VillagerProfessionTag), (Special.VillagerProfession)>) => void): void
function tags(extra: "point_of_interest_type", handler: (event: TagEventProbe<(Special.PointOfInterestTypeTag), (Special.PointOfInterestType)>) => void): void
function tags(extra: "memory_module_type", handler: (event: TagEventProbe<(Special.MemoryModuleTypeTag), (Special.MemoryModuleType)>) => void): void
function tags(extra: "sensor_type", handler: (event: TagEventProbe<(Special.SensorTypeTag), (Special.SensorType)>) => void): void
function tags(extra: "schedule", handler: (event: TagEventProbe<(Special.ScheduleTag), (Special.Schedule)>) => void): void
function tags(extra: "activity", handler: (event: TagEventProbe<(Special.ActivityTag), (Special.Activity)>) => void): void
function tags(extra: "loot_pool_entry_type", handler: (event: TagEventProbe<(Special.LootPoolEntryTypeTag), (Special.LootPoolEntryType)>) => void): void
function tags(extra: "loot_function_type", handler: (event: TagEventProbe<(Special.LootFunctionTypeTag), (Special.LootFunctionType)>) => void): void
function tags(extra: "loot_condition_type", handler: (event: TagEventProbe<(Special.LootConditionTypeTag), (Special.LootConditionType)>) => void): void
function tags(extra: "loot_number_provider_type", handler: (event: TagEventProbe<(Special.LootNumberProviderTypeTag), (Special.LootNumberProviderType)>) => void): void
function tags(extra: "loot_nbt_provider_type", handler: (event: TagEventProbe<(Special.LootNbtProviderTypeTag), (Special.LootNbtProviderType)>) => void): void
function tags(extra: "loot_score_provider_type", handler: (event: TagEventProbe<(Special.LootScoreProviderTypeTag), (Special.LootScoreProviderType)>) => void): void
function tags(extra: "command_argument_type", handler: (event: TagEventProbe<(Special.CommandArgumentTypeTag), (Special.CommandArgumentType)>) => void): void
function tags(extra: "dimension_type", handler: (event: TagEventProbe<(Special.DimensionTypeTag), (Special.DimensionType)>) => void): void
function tags(extra: "dimension", handler: (event: TagEventProbe<(Special.DimensionTag), (Special.Dimension)>) => void): void
function tags(extra: "float_provider_type", handler: (event: TagEventProbe<(Special.FloatProviderTypeTag), (Special.FloatProviderType)>) => void): void
function tags(extra: "int_provider_type", handler: (event: TagEventProbe<(Special.IntProviderTypeTag), (Special.IntProviderType)>) => void): void
function tags(extra: "height_provider_type", handler: (event: TagEventProbe<(Special.HeightProviderTypeTag), (Special.HeightProviderType)>) => void): void
function tags(extra: "block_predicate_type", handler: (event: TagEventProbe<(Special.BlockPredicateTypeTag), (Special.BlockPredicateType)>) => void): void
function tags(extra: "worldgen/noise_settings", handler: (event: TagEventProbe<(Special.WorldgenNoiseSettingsTag), (Special.WorldgenNoiseSettings)>) => void): void
function tags(extra: "worldgen/configured_carver", handler: (event: TagEventProbe<(Special.WorldgenConfiguredCarverTag), (Special.WorldgenConfiguredCarver)>) => void): void
function tags(extra: "worldgen/configured_feature", handler: (event: TagEventProbe<(Special.WorldgenConfiguredFeatureTag), (Special.WorldgenConfiguredFeature)>) => void): void
function tags(extra: "worldgen/placed_feature", handler: (event: TagEventProbe<(Special.WorldgenPlacedFeatureTag), (Special.WorldgenPlacedFeature)>) => void): void
function tags(extra: "worldgen/structure", handler: (event: TagEventProbe<(Special.WorldgenStructureTag), (Special.WorldgenStructure)>) => void): void
function tags(extra: "worldgen/structure_set", handler: (event: TagEventProbe<(Special.WorldgenStructureSetTag), (Special.WorldgenStructureSet)>) => void): void
function tags(extra: "worldgen/processor_list", handler: (event: TagEventProbe<(Special.WorldgenProcessorListTag), (Special.WorldgenProcessorList)>) => void): void
function tags(extra: "worldgen/template_pool", handler: (event: TagEventProbe<(Special.WorldgenTemplatePoolTag), (Special.WorldgenTemplatePool)>) => void): void
function tags(extra: "worldgen/biome", handler: (event: TagEventProbe<(Special.WorldgenBiomeTag), (Special.WorldgenBiome)>) => void): void
function tags(extra: "worldgen/noise", handler: (event: TagEventProbe<(Special.WorldgenNoiseTag), (Special.WorldgenNoise)>) => void): void
function tags(extra: "worldgen/density_function", handler: (event: TagEventProbe<(Special.WorldgenDensityFunctionTag), (Special.WorldgenDensityFunction)>) => void): void
function tags(extra: "worldgen/world_preset", handler: (event: TagEventProbe<(Special.WorldgenWorldPresetTag), (Special.WorldgenWorldPreset)>) => void): void
function tags(extra: "worldgen/flat_level_generator_preset", handler: (event: TagEventProbe<(Special.WorldgenFlatLevelGeneratorPresetTag), (Special.WorldgenFlatLevelGeneratorPreset)>) => void): void
function tags(extra: "worldgen/carver", handler: (event: TagEventProbe<(Special.WorldgenCarverTag), (Special.WorldgenCarver)>) => void): void
function tags(extra: "worldgen/feature", handler: (event: TagEventProbe<(Special.WorldgenFeatureTag), (Special.WorldgenFeature)>) => void): void
function tags(extra: "worldgen/structure_placement", handler: (event: TagEventProbe<(Special.WorldgenStructurePlacementTag), (Special.WorldgenStructurePlacement)>) => void): void
function tags(extra: "worldgen/structure_piece", handler: (event: TagEventProbe<(Special.WorldgenStructurePieceTag), (Special.WorldgenStructurePiece)>) => void): void
function tags(extra: "worldgen/structure_type", handler: (event: TagEventProbe<(Special.WorldgenStructureTypeTag), (Special.WorldgenStructureType)>) => void): void
function tags(extra: "worldgen/placement_modifier_type", handler: (event: TagEventProbe<(Special.WorldgenPlacementModifierTypeTag), (Special.WorldgenPlacementModifierType)>) => void): void
function tags(extra: "worldgen/block_state_provider_type", handler: (event: TagEventProbe<(Special.WorldgenBlockStateProviderTypeTag), (Special.WorldgenBlockStateProviderType)>) => void): void
function tags(extra: "worldgen/foliage_placer_type", handler: (event: TagEventProbe<(Special.WorldgenFoliagePlacerTypeTag), (Special.WorldgenFoliagePlacerType)>) => void): void
function tags(extra: "worldgen/trunk_placer_type", handler: (event: TagEventProbe<(Special.WorldgenTrunkPlacerTypeTag), (Special.WorldgenTrunkPlacerType)>) => void): void
function tags(extra: "worldgen/tree_decorator_type", handler: (event: TagEventProbe<(Special.WorldgenTreeDecoratorTypeTag), (Special.WorldgenTreeDecoratorType)>) => void): void
function tags(extra: "worldgen/root_placer_type", handler: (event: TagEventProbe<(Special.WorldgenRootPlacerTypeTag), (Special.WorldgenRootPlacerType)>) => void): void
function tags(extra: "worldgen/feature_size_type", handler: (event: TagEventProbe<(Special.WorldgenFeatureSizeTypeTag), (Special.WorldgenFeatureSizeType)>) => void): void
function tags(extra: "worldgen/biome_source", handler: (event: TagEventProbe<(Special.WorldgenBiomeSourceTag), (Special.WorldgenBiomeSource)>) => void): void
function tags(extra: "worldgen/chunk_generator", handler: (event: TagEventProbe<(Special.WorldgenChunkGeneratorTag), (Special.WorldgenChunkGenerator)>) => void): void
function tags(extra: "worldgen/material_condition", handler: (event: TagEventProbe<(Special.WorldgenMaterialConditionTag), (Special.WorldgenMaterialCondition)>) => void): void
function tags(extra: "worldgen/material_rule", handler: (event: TagEventProbe<(Special.WorldgenMaterialRuleTag), (Special.WorldgenMaterialRule)>) => void): void
function tags(extra: "worldgen/density_function_type", handler: (event: TagEventProbe<(Special.WorldgenDensityFunctionTypeTag), (Special.WorldgenDensityFunctionType)>) => void): void
function tags(extra: "worldgen/structure_processor", handler: (event: TagEventProbe<(Special.WorldgenStructureProcessorTag), (Special.WorldgenStructureProcessor)>) => void): void
function tags(extra: "worldgen/structure_pool_element", handler: (event: TagEventProbe<(Special.WorldgenStructurePoolElementTag), (Special.WorldgenStructurePoolElement)>) => void): void
function tags(extra: "chat_type", handler: (event: TagEventProbe<(Special.ChatTypeTag), (Special.ChatType)>) => void): void
function tags(extra: "cat_variant", handler: (event: TagEventProbe<(Special.CatVariantTag), (Special.CatVariant)>) => void): void
function tags(extra: "frog_variant", handler: (event: TagEventProbe<(Special.FrogVariantTag), (Special.FrogVariant)>) => void): void
function tags(extra: "banner_pattern", handler: (event: TagEventProbe<(Special.BannerPatternTag), (Special.BannerPattern)>) => void): void
function tags(extra: "instrument", handler: (event: TagEventProbe<(Special.InstrumentTag), (Special.Instrument)>) => void): void
function tags(extra: "trim_material", handler: (event: TagEventProbe<(Special.TrimMaterialTag), (Special.TrimMaterial)>) => void): void
function tags(extra: "trim_pattern", handler: (event: TagEventProbe<(Special.TrimPatternTag), (Special.TrimPattern)>) => void): void
function tags(extra: "creative_mode_tab", handler: (event: TagEventProbe<(Special.CreativeModeTabTag), (Special.CreativeModeTab)>) => void): void
function tags(extra: "damage_type", handler: (event: TagEventProbe<(Special.DamageTypeTag), (Special.DamageType)>) => void): void
function tags(extra: "rule_block_entity_modifier", handler: (event: TagEventProbe<(Special.RuleBlockEntityModifierTag), (Special.RuleBlockEntityModifier)>) => void): void
function tags(extra: "decorated_pot_patterns", handler: (event: TagEventProbe<(Special.DecoratedPotPatternsTag), (Special.DecoratedPotPatterns)>) => void): void
function tags(extra: "worldgen/multi_noise_biome_source_parameter_list", handler: (event: TagEventProbe<(Special.WorldgenMultiNoiseBiomeSourceParameterListTag), (Special.WorldgenMultiNoiseBiomeSourceParameterList)>) => void): void
function tags(extra: "corgilib:blending_function", handler: (event: TagEventProbe<(Special.BlendingFunctionTag), (Special.BlendingFunction)>) => void): void
function tags(extra: "corgilib:condition", handler: (event: TagEventProbe<(Special.ConditionTag), (Special.Condition)>) => void): void
function tags(extra: "corgilib:villager_trades_item_listing", handler: (event: TagEventProbe<(Special.VillagerTradesItemListingTag), (Special.VillagerTradesItemListing)>) => void): void
function tags(extra: "createbigcannons:block_recipe_serializers", handler: (event: TagEventProbe<(Special.BlockRecipeSerializersTag), (Special.BlockRecipeSerializers)>) => void): void
function tags(extra: "createbigcannons:block_recipe_types", handler: (event: TagEventProbe<(Special.BlockRecipeTypesTag), (Special.BlockRecipeTypes)>) => void): void
function tags(extra: "createbigcannons:cannon_cast_shapes", handler: (event: TagEventProbe<(Special.CannonCastShapesTag), (Special.CannonCastShapes)>) => void): void
function tags(extra: "forge:entity_data_serializers", handler: (event: TagEventProbe<(Special.EntityDataSerializersTag), (Special.EntityDataSerializers)>) => void): void
function tags(extra: "forge:fluid_type", handler: (event: TagEventProbe<(Special.FluidTypeTag), (Special.FluidType)>) => void): void
function tags(extra: "forge:global_loot_modifier_serializers", handler: (event: TagEventProbe<(Special.GlobalLootModifierSerializersTag), (Special.GlobalLootModifierSerializers)>) => void): void
function tags(extra: "fruitfulfun:fruit_type", handler: (event: TagEventProbe<(Special.FruitTypeTag), (Special.FruitType)>) => void): void
function tags(extra: "obtrophies:custom_behavior", handler: (event: TagEventProbe<(Special.CustomBehaviorTag), (Special.CustomBehavior)>) => void): void
function tags(extra: "twilightforest:dwarf_rabbit_variant", handler: (event: TagEventProbe<(Special.DwarfRabbitVariantTag), (Special.DwarfRabbitVariant)>) => void): void
function tags(extra: "twilightforest:tiny_bird_variant", handler: (event: TagEventProbe<(Special.TinyBirdVariantTag), (Special.TinyBirdVariant)>) => void): void
function tags(extra: "sgjourney:symbol_set", handler: (event: TagEventProbe<(Special.SymbolSetTag), (Special.SymbolSet)>) => void): void
function tags(extra: "forge:biome_modifier", handler: (event: TagEventProbe<(Special.BiomeModifierTag), (Special.BiomeModifier)>) => void): void
function tags(extra: "enhancedcelestials:lunar/event", handler: (event: TagEventProbe<(Special.LunarEventTag), (Special.LunarEvent)>) => void): void
function tags(extra: "twilight:magic_paintings", handler: (event: TagEventProbe<(Special.MagicPaintingsTag), (Special.MagicPaintings)>) => void): void
function tags(extra: "moonlight:soft_fluids", handler: (event: TagEventProbe<(Special.SoftFluidsTag), (Special.SoftFluids)>) => void): void
function tags(extra: "blueprint:structure_repaletters", handler: (event: TagEventProbe<(Special.StructureRepalettersTag), (Special.StructureRepaletters)>) => void): void
function tags(extra: "blueprint:modded_biome_slices", handler: (event: TagEventProbe<(Special.ModdedBiomeSlicesTag), (Special.ModdedBiomeSlices)>) => void): void
function tags(extra: "forge:structure_modifier", handler: (event: TagEventProbe<(Special.StructureModifierTag), (Special.StructureModifier)>) => void): void
function tags(extra: "sgjourney:point_of_origin", handler: (event: TagEventProbe<(Special.PointOfOriginTag), (Special.PointOfOrigin)>) => void): void
function tags(extra: "twilight:wood_palettes", handler: (event: TagEventProbe<(Special.WoodPalettesTag), (Special.WoodPalettes)>) => void): void
function tags(extra: "sgjourney:solar_system", handler: (event: TagEventProbe<(Special.SolarSystemTag), (Special.SolarSystem)>) => void): void
function tags(extra: "sgjourney:galaxy", handler: (event: TagEventProbe<(Special.GalaxyTag), (Special.Galaxy)>) => void): void
function tags(extra: "twilight:restrictions", handler: (event: TagEventProbe<(Special.RestrictionsTag), (Special.Restrictions)>) => void): void
function tags(extra: "sgjourney:symbols", handler: (event: TagEventProbe<(Special.SymbolsTag), (Special.Symbols)>) => void): void
function tags(extra: "moonlight:map_markers", handler: (event: TagEventProbe<(Special.MapMarkersTag), (Special.MapMarkers)>) => void): void
function tags(extra: "twilight:biome_layer_stack", handler: (event: TagEventProbe<(Special.BiomeLayerStackTag), (Special.BiomeLayerStack)>) => void): void
function tags(extra: "sgjourney:address_table", handler: (event: TagEventProbe<(Special.AddressTableTag), (Special.AddressTable)>) => void): void
function tags(extra: "sgjourney:stargate_variant", handler: (event: TagEventProbe<(Special.StargateVariantTag), (Special.StargateVariant)>) => void): void
function tags(extra: "enhancedcelestials:lunar/dimension_settings", handler: (event: TagEventProbe<(Special.LunarDimensionSettingsTag), (Special.LunarDimensionSettings)>) => void): void
}
}